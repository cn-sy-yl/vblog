(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{484:function(t,e,v){t.exports=v.p+"assets/img/git常用命令.55c6a51b.png"},485:function(t,e,v){t.exports=v.p+"assets/img/Git Flow.84a33973.png"},495:function(t,e,v){"use strict";v.r(e);var _=v(4),a=Object(_.a)({},(function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"git常用命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git常用命令"}},[t._v("#")]),t._v(" Git常用命令")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("基本操作\n"),_("img",{attrs:{src:v(484)}})])]),t._v(" "),_("li",[_("p",[t._v("分支操作"),_("br"),t._v(" "),_("code",[t._v("git branch [-r|-a]")]),t._v(" 查看本地/远程/全部分支"),_("br"),t._v(" "),_("code",[t._v("git branch <name>")]),t._v(" 创建分支"),_("br"),t._v(" "),_("code",[t._v("git checkout <name>")]),t._v(" 切换到分支"),_("br"),t._v(" "),_("code",[t._v("git checkout -b <name>")]),t._v(" 创建并切换到分支"),_("br"),t._v(" "),_("code",[t._v("git checkout -b <name> <origin>/<name>")]),t._v(" 使用远程仓库的某个分支创建本地分支并切换"),_("br"),t._v(" "),_("code",[t._v("git checkout --merge <name>")]),t._v(" 切换到分支，并将当前分支修改同步到切换的分支下"),_("br"),t._v(" "),_("code",[t._v("git branch -D|--delete <name>")]),t._v(" 删除分支")])]),t._v(" "),_("li",[_("p",[t._v("文件操作"),_("br"),t._v(" "),_("code",[t._v("git checkout -- <file>")]),t._v(" 撤销文件在工作区的全部修改，若文件已被添加到暂存区，则回到添加到暂存区后的状态，否则回到和版本库一致的状态"),_("br"),t._v(" "),_("code",[t._v("git reset HEAD <file>")]),t._v(" 拉取最近一次提交到版本库的文件到暂存区，该操作不影响工作区")])]),t._v(" "),_("li",[_("p",[t._v("其它命令"),_("br"),t._v(" "),_("code",[t._v("git status")]),t._v(" 显示文件或文件夹在工作区、暂存区的状态"),_("br"),t._v(" "),_("code",[t._v("git diff SHA1 SHA2")]),t._v(" 比较两个历史版本之间的差异"),_("br"),t._v(" "),_("code",[t._v("git push origin HEAD --force")]),t._v(" 强制提交，之前错误的提交就从远程仓库删除"),_("br"),t._v(" "),_("code",[t._v("git tag [-l -n]")]),t._v(" 查看标签，-l列表形式列出，-n附加说明"),_("br"),t._v(" "),_("code",[t._v("git tag -l 1.*.*")]),t._v(" 查复符合检索条件的标签"),_("br"),t._v(" "),_("code",[t._v("git tag <name>")]),t._v(" 创建tag(本地)"),_("br"),t._v(" "),_("code",[t._v('git tag -a 1.0.0 -m "desc"')]),t._v(" 创建带备注的tag"),_("br"),t._v(" "),_("code",[t._v('git tag -a 1.0.0 <commit_id> -m "desc"')]),t._v(" 针对特定的commit版本SHA创建标签"),_("br"),t._v(" "),_("code",[t._v("git tag -d 1.0.0")]),t._v(" 删除标签(本地)"),_("br"),t._v(" "),_("code",[t._v("git push origin --tags")]),t._v(" 将本地所有标签发布到远程仓库"),_("br"),t._v(" "),_("code",[t._v("git push origin --delete <name>")]),t._v(" 删除远程仓库对应标签")])])]),t._v(" "),_("p",[_("font",{attrs:{color:"#aaa",size:"2"}},[t._v("<待补充...>")])],1),t._v(" "),_("h2",{attrs:{id:"常见的git协作流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常见的git协作流程"}},[t._v("#")]),t._v(" 常见的Git协作流程")]),t._v(" "),_("h3",{attrs:{id:"一-git-flow工作流"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一-git-flow工作流"}},[t._v("#")]),t._v(" 一.Git Flow工作流")]),t._v(" "),_("p",[t._v("  Git Flow定义了一个项目发布的分支模型，为管理具有预定发布周期的大型项目提供了一个健壮的框架。\n"),_("img",{attrs:{src:v(485)}})]),t._v(" "),_("ol",[_("li",[t._v("master分支"),_("br"),t._v("\n存放所有正式发布的版本，可作为项目历史版本记录分支，不直接提交代码。")]),t._v(" "),_("li",[t._v("hotfix分支"),_("br"),t._v("\n基于master创建，对线上版本的bug进行修复，完成后直接合并到master分支和develop分支，如果当前还有新功能release分支，也需要同步到release分支上。\n同一时间只有一个，生命周期较短。")]),t._v(" "),_("li",[t._v("release分支"),_("br"),t._v("\n基于develop分支创建，当新功能足够发布一个新版本（或接近新版本的发布日期），从develop分支创建一个release分支作为新版本的起点，用于测试，所有的\n测试bug在这个分支修改。测试完成后合并到master并打上版本号，同时也合并到develop分支。一旦release分支创建后，就不能从develop分支合并新的改动\n到release分支。同一时间只有一个，生命周期较短，仅用于发布。")]),t._v(" "),_("li",[t._v("develop分支\n主开发分支，整合各个功能feature分支。")]),t._v(" "),_("li",[t._v("feature分支\n基于develop分支创建，新功能分支，开发完成后合并入develop分支，同一时间存在多个。")])]),t._v(" "),_("h3",{attrs:{id:"二-github-flow"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二-github-flow"}},[t._v("#")]),t._v(" 二.github flow")]),t._v(" "),_("p",[t._v("fd")]),t._v(" "),_("h3",{attrs:{id:"三-gitlab-flow"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三-gitlab-flow"}},[t._v("#")]),t._v(" 三.gitlab flow")]),t._v(" "),_("p",[t._v("fd")])])}),[],!1,null,null,null);e.default=a.exports}}]);